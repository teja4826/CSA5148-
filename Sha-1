#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

// SHA-1 constants
#define SHA1_BLOCK_SIZE 20  // SHA1 outputs a 20 byte digest

typedef struct {
    uint32_t state[5];
    uint32_t count[2];
    uint8_t buffer[64];
} SHA1_CTX;

// Circular left shift
#define ROTATELEFT(x, n) (((x) << (n)) | ((x) >> (32 - (n))))

void sha1_transform(SHA1_CTX *ctx, const uint8_t data[]) {
    uint32_t a, b, c, d, e, f, k, temp;
    uint32_t w[80];
    int i;

    for (i = 0; i < 16; ++i) {
        w[i] = (data[i * 4] << 24) | (data[i * 4 + 1] << 16) | (data[i * 4 + 2] << 8) | (data[i * 4 + 3]);
    }

    for (i = 16; i < 80; ++i) {
        w[i] = ROTATELEFT(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16], 1);
    }

    a = ctx->state[0];
    b = ctx->state[1];
    c = ctx->state[2];
    d = ctx->state[3];
    e = ctx->state[4];

    for (i = 0; i < 80; ++i) {
        if (i < 20) {
            f = (b & c) | ((~b) & d);
            k = 0x5A827999;
        } else if (i < 40) {
            f = b ^ c ^ d;
            k = 0x6ED9EBA1;
        } else if (i < 60) {
            f = (b & c) | (b & d) | (c & d);
            k = 0x8F1BBCDC;
        } else {
            f = b ^ c ^ d;
            k = 0xCA62C1D6;
        }
        temp = ROTATELEFT(a, 5) + f + e + k + w[i];
        e = d;
        d = c;
        c = ROTATELEFT(b, 30);
        b = a;
        a = temp;
    }

    ctx->state[0] += a;
    ctx->state[1] += b;
    ctx->state[2] += c;
    ctx->state[3] += d;
    ctx->state[4] += e;
}

void sha1_init(SHA1_CTX *ctx) {
    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
    ctx->count[0] = 0;
    ctx->count[1] = 0;
}

void sha1_update(SHA1_CTX *ctx, const uint8_t data[], size_t len) {
    size_t i, j;

    j = (ctx->count[0] >> 3) & 63;
    if ((ctx->count[0] += len << 3) < (len << 3)) ctx->count[1]++;
    ctx->count[1] += (len >> 29);
    if ((j + len) > 63) {
        memcpy(&ctx->buffer[j], data, (i = 64 - j));
        sha1_transform(ctx, ctx->buffer);
        for (; i + 63 < len; i += 64) {
            sha1_transform(ctx, &data[i]);
        }
        j = 0;
    } else i = 0;
    memcpy(&ctx->buffer[j], &data[i], len - i);
}

void sha1_final(SHA1_CTX *ctx, uint8_t digest[SHA1_BLOCK_SIZE]) {
    uint8_t finalcount[8];
    uint8_t c;
    size_t i;

    for (i = 0; i < 8; i++) {
        finalcount[i] = (uint8_t)((ctx->count[(i >= 4 ? 0 : 1)] >> ((3 - (i & 3)) * 8)) & 255);
    }
    c = 0x80;
    sha1_update(ctx, &c, 1);
    while ((ctx->count[0] & 504) != 448) {
        c = 0x00;
        sha1_update(ctx, &c, 1);
    }
    sha1_update(ctx, finalcount, 8);
    for (i = 0; i < SHA1_BLOCK_SIZE; i++) {
        digest[i] = (uint8_t)((ctx->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
    }
    memset(ctx, 0, sizeof(*ctx));
    memset(&finalcount, 0, sizeof(finalcount));
}

void sha1(const uint8_t *data, size_t len, uint8_t hash[SHA1_BLOCK_SIZE]) {
    SHA1_CTX ctx;
    sha1_init(&ctx);
    sha1_update(&ctx, data, len);
    sha1_final(&ctx, hash);
}

void print_hash(const uint8_t hash[SHA1_BLOCK_SIZE]) {
    for (int i = 0; i < SHA1_BLOCK_SIZE; i++) {
        printf("%02x", hash[i]);
    }
    printf("\n");
}

int main() {
    const char *msg = "Hello, world!";
    uint8_t hash[SHA1_BLOCK_SIZE];

    sha1((const uint8_t *)msg, strlen(msg), hash);
    printf("SHA-1 hash: ");
    print_hash(hash);

    return 0;
}
